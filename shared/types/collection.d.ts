import { Request } from 'express';
import { ObjectId } from 'mongodb';

/**
 * Represents a collection document in the database.
 * - `name`: the name of the collection.
 * - `username`: the username of the user that owns the collection.
 * - `questions`: an array of ObjectIds referencing the Questions in the collection.
 * - `visibility`: the visibility of the collection, either 'public' or 'private'.
 */
export interface Collection {
  name: string;
  username: string;
  questions: Types.ObjectId[];
  visibility: 'public' | 'private';
}

/**
 * Represents a collection document in the database.
 * - `_id`: the unique identifier for the collection, generated by MongoDB.
 * - `name`: the name of the collection.
 * - `username`: the username the user that owns the collection.
 * - `questions`: an array of ObjectIds representing the Questions in the collection.
 * - `visibility`: the visibility of the collection, either 'public' or 'private'.
 */
export interface DatabaseCollection extends Collection {
  _id: ObjectId;
}

/**
 * Interface extending the request body for creating a new collection.
 * - `body`: the collection being created.
 */
export interface CreateCollectionRequest extends Request {
  body: Collection;
}

/**
 * Express request for fetching collections based on the user's username.
 * - `params`: contains the `username` of the user to look up the collections.
 */
export interface GetCollectionsByUserRequest extends Request {
  params: {
    username: string;
  };
}

// redo these types, extend the params from above with the body like in chat.
/**
 * Express request for querying a collection by its id.
 * - `params`: contains the `id` of the collection to look up.
 */
export interface CollectionByIdRequest extends Request {
  params: {
    id: string;
  };
}

/**
 * Express request for updating a collection's visibility.
 * - `id`: contains the `id` of the collection being updated.
 * - `visibility`: contains the new visibility status of the collection.
 */
export interface UpdateCollectionVisibilityRequest extends CollectionByIdRequest {
  body: {
    visibility: 'public' | 'private';
  };
}

/**
 * Express request for updating the name of a collection.
 * - `id`: contains the `id` of the collection being updated.
 * - `name`: contains the new name of the collection.
 */
export interface UpdateCollectionNameRequest extends CollectionByIdRequest {
  body: {
    name: string;
  };
}

/**
 * Express request for adding or deleting a question from a collection.
 * - `id`: contains the `id` of the collection being updated.
 * - `questionId`: contains the `id` of the question to be added.
 */
export interface QuestionToCollectionRequest extends CollectionByIdRequest {
  body: {
    questionId: string;
  };
}

/**
 * Represents the response for collection-related operations.
 * - `DatabaseCollection`: a collection object.
 * - `error`: an error message if the operation fails.
 */
export type CollectionResponse = DatabaseCollection | { error: string };

/**
 * Represents the response for multiple collection-related operations.
 * - `DatabaseCollection[]`: a list of collection objects.
 * - `error`: an error message if the operation fails.
 */
export type CollectionsResponse = DatabaseCollection[] | { error: string };
