import { Request } from 'express';
import { ObjectId } from 'mongodb';

/**
 * Represents user credentials for authentication.
 * - `username`: The unique username of the user.
 * - `password`: The user's passw ord.
 */
export interface UserCredentials {
  username: string;
  password: string;
}

/**
 * Represents a badge earned by a user
 * - `badgeId`: Badge id
 * - `dateEarned`: Date of achievement
 */
export interface EarnedBadge {
  badgeId: string;
  dateEarned: Date;
}

/**
 * Represents a user document, including user credentials and additional details.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 * - `dateJoined`: The date when the user registered.
 * - `biography`: A short description or bio of th e user (optional).
 * - 'following': A string[] of who the user is following
 * - `profilePhoto`: A path to the user's profile photo.
 * - `badgesEarned`: An array of objects containing badgeId and dateEarned.
 * - `following`: A list of usernames representing the users this user is following.
 * - `followers`: A list of usernames representing the users that follow this user.
 */
export interface User extends UserCredentials {
  dateJoined: Date;
  biography?: string;
  following?: string[]; // An array of usernames the user is following
  profilePhoto?: string;
  badgesEarned: EarnedBadge[];
  followers: string[];
  following: string[];
}

/**
 * Represents a user document in the database.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 * - `dateJoined`: The date when the user registered.
 * - `biography`: A short description or bio of the user (optional).
 * - `profilePhoto`: A path to the user's profile photo.
 * - `following`: A list of usernames representing the users this user is following.
 * - `followers`: A list of usernames representing the users that follow this user.
 * - `_id`: The unique identifier for the user, generated by MongoDB.
 */
export interface DatabaseUser extends User {
  _id: ObjectId;
}

/**
 * Express request for user login, containing user credentials.
 * - `username`: The username submitted in the request (body).
 * - `password`: The password submitted in the request (body).
 * - `biography`: Optional field for biography information (body).
 * - `profilePhoto`: Optional field for path to the user's profile photo (body).
 */
export interface UserRequest extends Request {
  body: {
    username: string;
    password: string;
    biography?: string;
    profilePhoto?: string;
  };
}

/**
 * Express request for querying a user by their username.
 * - `u  sername`: The username provided as a route parameter.
 */
export interface UserByUsernameRequest extends Request {
  params: {
    username: string;
  };
}

/**
 * Represents a "safe" user   object that excludes sensitive information like the password.
 */
export type SafeDatabaseUser = Omit<DatabaseUser, 'password'>;

/**
 * Represents the response for user-related operations.
 * - `SafeDatabaseUser`: A user object without sensitive data if the operation i  s successful.
 * - `error`: An error message if the operation fails.
 */
export type UserResponse = SafeDatabaseUser | { error: string };

/**
 * Represents the response for multiple user-related operations.
 * - `SafeDatabaseUser[]`: A list of user objects without sensitive data if the oper ation is successful.
 * - `error`: An error message if the operation fail s.
 */
export type UsersResponse = SafeDatabaseUser[] | { error: string };

/**
 * Express request for updating a user's biography.
 * - `username`: The username whose biography is b  eing updated (body).
 * - `biography`: The new biography content to be set (body).
 */
export interface UpdateBiographyRequest extends Request {
  body: {
    username: string;
    biography: string;
  };
}

/**
 * Express request for following another user.
 * - `username`: The username of the user who is following someo ne (in the body).
 * - `followUsername`: The username of the user being followed (in the body).
 */
export interface FollowUserRequest extends Request {
  body: {
    username: string;
    followUsername: string;
  };
}

/**
 * Response for a follow action.
 * - `success`: Boolean indicati ng if the follow action was successful.
 * - `error`: An optional error message if the follow action fails.
 */
export type FollowUserResponse = { success: boolean } | { error: string };

/**
 * Express request for updating a user's profile photo.
 * - `username`: The username whose profile photo is being updated (body).
 * - `profilePhoto`: The new profile path to be set (body).
 */
export interface UpdateProfilePhotoRequest extends Request {
  body: {
    username: string;
    profilePhoto: string;
  };
}

export interface RankedUser extends SafeDatabaseUser {
  count: number; // counting the number of answers by the user
}

export type RankedUsersResponse = RankedUser[] | { error: string };
/**
 * Express request handling following and unfollowing of users.
 * - `follower`: The username whose is following/unfollowing (body).
 * - `followee`: The username who is being followed/unfollowed (body).
 */
export interface ToggleFollowRequest extends Request {
  body: {
    follower: string;
    followee: string;
  };
}
